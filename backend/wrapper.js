const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');

async function generateWrapperPackage() {
  const basePath = path.join(__dirname, 'temp', 'grabpay-wrapper-latest');
  const packageName = 'grabpay-wrapper-latest';
  const tgzName = `${packageName}-1.0.0.tgz`;

  // Create directory
  fs.mkdirSync(basePath, { recursive: true });

  // package.json
  const packageJson = {
    name: packageName,
    version: "1.0.0",
    main: "index.js",
    description: "Mock GrabPay wrapper generated by Grab AI Assistant",
    license: "MIT"
  };
  fs.writeFileSync(path.join(basePath, 'package.json'), JSON.stringify(packageJson, null, 2), 'utf-8');

  // index.js
  const indexJs = `
export { createGrabPayHandler } from './grabpay.js';
export { createGrabLoanHandler } from './grabloans.js';
  `;
  fs.writeFileSync(path.join(basePath, 'index.js'), indexJs.trim(), 'utf-8');

  // grabpay.js
  const grabpayJs = `
export function createGrabPayHandler(config) {
  return async () => {
    const response = await fetch('http://localhost:4000/mock-grabpay/initiate', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(config)
    });
    return response.json();
  };
}
  `;
  fs.writeFileSync(path.join(basePath, 'grabpay.js'), grabpayJs.trim(), 'utf-8');

  // grabloans.js
  const grabloansJs = `
export function createGrabLoanHandler(config) {
  return async () => {
    const response = await fetch('http://localhost:4000/mock-grabloans/initiate', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(config)
    });
    return response.json();
  };
}
  `;
  fs.writeFileSync(path.join(basePath, 'grabloans.js'), grabloansJs.trim(), 'utf-8');

  // README.md
  const readme = `
# GrabPay Wrapper

## Usage

Install:
\`\`\`
npm install ./${tgzName}
\`\`\`

Import:
\`\`\`
import { useGrabPay, useGrabLoans } from '${packageName}';
\`\`\`
  `;
  fs.writeFileSync(path.join(basePath, 'README.md'), readme.trim(), 'utf-8');

  // Pack
  return new Promise((resolve, reject) => {
    exec(`cd ${basePath} && npm pack`, (err, stdout, stderr) => {
      if (err) {
        console.error('Packaging error:', err);
        return reject(err);
      }
      console.log('âœ… Packaged module:', stdout.trim());
      resolve(path.join(basePath, stdout.trim()));
    });
  });
}

module.exports = { generateWrapperPackage };